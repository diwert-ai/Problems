#дискретная задача о рюкзаке
#из лекции Хирьянов - https://www.youtube.com/watch?v=aN15vtKjdP4&list=PLRDzFCPr95fK7tr47883DFUbm4GeOjjc0&index=16

'''
Пусть даны N предметов,v_i - цена i-го предмета (цены действительные числа), 
m_i - масса i-го предмета (массы - целые числа). 
M - предельная масса (целое число), которая может поместиться в рюкзак (емкость рюкзака). 
Найти максимальну стоимоть предметов, которую можно поместить в рюкзак.

Пусть целевая фукнция F(k,i) - максимальная стоимость предметов, которые помещаются в рюкзак емкости k, 
при этом можно использовать только первые i предметов. Тогда искомое значение F(M,N).

F(k,0) = 0 для любого k.
F(k,1) = 0, если масса первого предмета больше k.
F(k,1) = v_1, если масса первого предмета меньше, либо равна k

Пусть F(s,t) известны для любого s<=k и t<i. Найдем F(k,i). 

Если m_i <= k, т.е. i-й предмет можно поместить в рюкзак, тогда:
F(k,i) = v_i + F(k-m_i,i-1), если i-й предмет помещаем в рюкзак 
с i-1 предметами, положенными на предудущих шагах и F(k,i) = F(k,i-1),  
если i-й предмет не помещаем в рюкзак. 

Из двух вариантов выбираем тот, который дает максимальную стоимость:
F(k,i) = max(F(k,i-1), v_i+F(k-m_i,i-1))

Если же i-й предмет невозможно поместить  в рюкзак, т.е. m_i > k, тогда
F(k,i) = F(k,i-1)

Динамическое программирование даст ассимптотику О(N*M)
'''

def knapsack(M:int,m:list,v:list):
    N = len(m)
    assert N == len(v), 'кол-во предметов должно совпадать с длиной массива стоимостей'

    F = [[0]*(N+1) for i in range(M+1)]
    for i in range(1,N+1):
        for k in range(1,M+1):
            if m[i-1] <= k:
                F[k][i] = max(F[k][i-1], v[i-1]+F[k-m[i-1]][i-1])
            else:
                F[k][i] = F[k][i-1]

    return F[M][N]

def test0():
    M = 10

    v_tests = [[1,4,6,5],[3,4,6,5],[4,4,6,5],[4,5,6,6]]
    m_tests = [[2,3,3,5],[3,3,3,5],[3,3,3,5],[3,4,4,5]]

    for i,(v,m) in enumerate(zip(v_tests,m_tests)):
        print(f'test#{i}: v={v} m={m} M={M}')
        print(f'max value: {knapsack(M,m,v)}')
        print('')

if __name__ == '__main__':
    test0()
